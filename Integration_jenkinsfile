pipeline {

    agent any
    stages {
       
        stage("Cloning the Code") {
            steps {
                   script {
                sh "echo cloning"             
                   }
                
                }
        }
           // ------ SonarQube Analysis -----
        stage('SonarQube Analysis') {
            steps{
                     script {
                    
                             withSonarQubeEnv(installationName: 'sonar'){
                                withMaven{
                                sh "./mvnw sonar:sonar "
                                }
                            }
                     }
                 }
        }
         // ------ Sonar Quality Gate -----
        stage("Quality Gate") {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }
        
        //       ------ Building Angular Project with Npm -----
      /*  stage("Npm Install") {
            steps {
                script {
                    sh "npm install"
                }
            }
        }    */      
    
        //       ------ Building Jhipster Project with mvn -----
        stage("Building the App") {
            steps {
                script {
                    sh "npm install"
                    withMaven {
                    sh "./mvnw install"
                    }
                }
            }
        }
        stage('Back-end tests') {
          steps {
              script{
            try {
                    sh "./mvnw test"
                } catch(err) {
                    throw err
                } finally {
                  step([$class: 'JUnitResultArchiver', allowEmptyResults: true, testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
          }}
    }

    stage('Front-end tests') {
        steps{
            script{
                   try {
              sh 'npm install'
              sh "npm test"
          } catch(err) {
              throw err
          } finally {
            step([$class: 'JUnitResultArchiver',  allowEmptyResults: true, testResults: '**/target/test-results/karma/TESTS-*.xml'])
          }
        }}
    }
        
        //       ------ Dockerizing The Project using docker ------

        stage("Dockerizing The app") {
              steps {
                sh "./mvnw -Pprod verify jib:dockerBuild"
            }
        } 
       
    }
    post {
        success {
            mail bcc: '', body: 'The CI pipeline was successful', cc: 'chamssidine.abderrahim@etudiant-isi.utm.tn', from: '', replyTo: '', subject: 'Successful Build', to: 'oueslatighassen5201@gmail.com'
        }
        failure {
            mail bcc: '', body: 'The CI pipeline was a failure ', cc: 'chamssidine.abderrahim@etudiant-isi.utm.tn', from: '', replyTo: '', subject: 'failed Build', to: 'oueslatighassen5201@gmail.com'
        }
    }
}
