pipeline {

    agent any
    environment {
      // ------ DOCKER -----
        imageName = "springbootdocker"
        registryCredentials = "nexus-user-credentials"
        registry = "172.18.0.4:8081"
        dockerImage = ''
        registryCredential = "dockerhub_cred"
        reg = "devops"
      // --------------------
        // This can be nexus3 or nexus2
        NEXUS_VERSION = "nexus3"
        // This can be http or https
        NEXUS_PROTOCOL = "http"
        // Where your Nexus is running
        NEXUS_URL = "172.18.0.4:8081"
        // Repository where we will upload the artifact
        NEXUS_REPOSITORY = "artifact-repository"
        // Jenkins credential id to authenticate to Nexus OSS
        NEXUS_CREDENTIAL_ID = "nexus-user-credentials"
    }
    stages {
       
        stage("Clone Code") {
            steps {
                script {
                    // Let's clone the source
                    git branch: 'dev', credentialsId: 'be415b2c-6347-48a4-a24b-6cc743c73672', url: 'http://172.18.02/root/mainapp.git'                                                         }
                }
        }
           // ------ Sonar Quality Gate -----
        stage('Analysing the Code') {
            steps{
                     script {
                    
                             withSonarQubeEnv(installationName: 'sonar'){
                                withMaven{
                                sh "./mvnw sonar:sonar "
                                }
                            }
                     }
                 }
        }
        stage("Quality Gate ") {
            steps {
                waitForQualityGate abortPipeline: true
            }
        }
        
        //       ------ Building Angular Project with Npm -----
        stage("Npm Install") {
            steps {
                script {
                    sh "npm install"
                    sh "npm run build"
                }
            }
        }           
    
        //       ------ Building Jhipster Project with mvn -----
        stage("mvn build") {
            steps {
                script {
                    withMaven {
                    sh "./mvnw install"
                    }
                }
            }
        }      
        stage("Publish to nexus") {
            steps {
                script {
                    // Read POM xml file using 'readMavenPom' step , this step 'readMavenPom' is included in: https://plugins.jenkins.io/pipeline-utility-steps
                    def pom = readMavenPom file: 'pom.xml';
                    writeMavenPom model: pom;
                    // Find built artifact under target folder
                    filesByGlob = findFiles(glob: "target/*.${pom.packaging}");
                    // Print some info from the artifact found
                    echo "${filesByGlob[0].name} ${filesByGlob[0].path} ${filesByGlob[0].directory} ${filesByGlob[0].length} ${filesByGlob[0].lastModified}"
                    // Extract the path from the File found
                    artifactPath = filesByGlob[0].path;
                    // Assign to a boolean response verifying If the artifact name exists
                    artifactExists = fileExists artifactPath;

                    if(artifactExists) {
                        echo "*** File: ${artifactPath}, group: ${pom.groupId}, packaging: ${pom.packaging}, version ${pom.version}";

                        nexusArtifactUploader(
                            nexusVersion: NEXUS_VERSION,
                            protocol: NEXUS_PROTOCOL,
                            nexusUrl: NEXUS_URL,
                            groupId: pom.groupId,
                            version: pom.version,
                            repository: NEXUS_REPOSITORY,
                            credentialsId: NEXUS_CREDENTIAL_ID,
                            artifacts: [
                                // Artifact generated such as .jar, .ear and .war files.
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: artifactPath,
                                type: pom.packaging],

                                // Lets upload the pom.xml file for additional information for Transitive dependencies
                                [artifactId: pom.artifactId,
                                classifier: '',
                                file: "pom.xml",
                                type: "pom"]
                            ]
                        );

                    } else {
                        error "*** File: ${artifactPath}, could not be found";
                    }
                }
            }
            
        }
        
       stage("Dockerizing The app") {
              steps {
                sh "./mvnw -Pprod verify jib:dockerBuild"
            }
        } 
            stage("deploying docker image to nexus") {
              steps {
                sh "docker login -u admin -p nexusserver 172.18.0.4:8085 "
                sh "docker tag mainapp 172.18.0.4:8085/mainapp:latest"
                sh "docker push 172.18.0.4:8085/mainapp:latest"
              }
            }
            }
    post {
        success {
            mail bcc: '', body: 'The Daily pipeline was successful', cc: 'chamssidine.abderrahim@etudiant-isi.utm.tn', from: '', replyTo: '', subject: 'Successful Build', to: 'oueslatighassen5201@gmail.com'
        }
        failure {
            mail bcc: '', body: 'The Daily pipeline was a failure ', cc: 'chamssidine.abderrahim@etudiant-isi.utm.tn', from: '', replyTo: '', subject: 'failed Build', to: 'oueslatighassen5201@gmail.com'
        }
    }
}

